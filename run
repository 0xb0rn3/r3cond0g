#!/usr/bin/env bash

# ReconRaptor (r3cond0g) - Enhanced Runner & Setup Script
# Script Version: 0.2.2
# Target Tool Version: 0.2.2 ReconRaptor

set -e  # Exit on any error

# --- Configuration ---
REPO_URL="https://github.com/0xb0rn3/r3cond0g.git" # Your repository URL
REPO_NAME="r3cond0g"
TOOL_EXECUTABLE_NAME="r3cond0g"
MAIN_GO_FILE="main.go"
GO_MOD_FILE="go.mod"
UPDATE_CHECK_FILE=".last_update_check"
UPDATE_CHECK_INTERVAL=3600 # Check for updates every 1 hour (3600 seconds)

# --- Colors for Visual Feedback ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# --- Helper Functions for Printing Messages ---
print_header() {
    echo -e "${MAGENTA}╔═════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║                      ${CYAN}ReconRaptor (r3cond0g) Runner${MAGENTA}                      ║${NC}"
    echo -e "${MAGENTA}║                     ${BLUE}Enhanced Environment Setup & Launch${MAGENTA}                 ║${NC}"
    echo -e "${MAGENTA}║                          ${YELLOW}Script Version: 0.2.2${MAGENTA}                           ║${NC}"
    echo -e "${MAGENTA}╚═════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo
}

print_status() {
    echo -e "${BLUE}[⚙️ INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[✓ OKAY]${NC} $1"
}

print_error() {
    echo -e "${RED}[✗ FAIL]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[⚠️ WARN]${NC} $1"
}

print_update() {
    echo -e "${CYAN}[🔄 UPDATE]${NC} $1"
}

# --- OS Detection ---
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v apt-get &> /dev/null; then echo "ubuntu";
        elif command -v yum &> /dev/null; then echo "centos";
        elif command -v pacman &> /dev/null; then echo "arch";
        else echo "linux"; fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then echo "macos";
    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then echo "windows";
    else echo "unknown"; fi
}

# --- Dependency Installation ---
install_tool() {
    local tool_name="$1"
    local install_cmd="$2"
    local check_cmd="$3"

    if ! command -v $check_cmd &> /dev/null; then
        print_warning "$tool_name not found. Attempting to install..."
        eval "$install_cmd"
        if ! command -v $check_cmd &> /dev/null; then
            print_error "Failed to install $tool_name. Please install it manually."
            return 1
        fi
        print_success "$tool_name installed successfully."
    else
        print_success "$tool_name found: $(${check_cmd} --version 2>/dev/null || ${check_cmd} version 2>/dev/null || echo N/A)"
    fi
    return 0
}

install_git() {
    local os=$(detect_os)
    print_status "Checking Git for $os..."
    case $os in
        "ubuntu") install_tool "Git" "sudo apt-get update -qq && sudo apt-get install -y git" "git";;
        "centos") install_tool "Git" "sudo yum install -y git" "git";;
        "arch")   install_tool "Git" "sudo pacman -S --noconfirm git" "git";;
        "macos")  install_tool "Git" "brew install git" "git" || print_error "Homebrew not found. Install Git manually.";;
        "windows") print_warning "Windows detected. Please install Git manually from https://git-scm.com/"; return 1;;
        *) print_error "Unsupported OS for automatic Git installation. Please install Git manually."; return 1;;
    esac
}

install_golang() {
    local os=$(detect_os)
    print_status "Checking Go for $os..."
    case $os in
        "ubuntu") install_tool "Go" "sudo apt-get update -qq && sudo apt-get install -y golang-go" "go";;
        "centos") install_tool "Go" "sudo yum install -y golang" "go";;
        "arch")   install_tool "Go" "sudo pacman -S --noconfirm go" "go";;
        "macos")  install_tool "Go" "brew install go" "go" || print_error "Homebrew not found. Install Go manually.";;
        "windows") print_warning "Windows detected. Please install Go manually from https://golang.org/dl/"; return 1;;
        *) print_error "Unsupported OS for automatic Go installation. Please install Go manually from https://golang.org/dl/"; return 1;;
    esac
}

# --- Update Mechanism ---
get_git_commit_hash() {
    git rev-parse HEAD 2>/dev/null || echo "unknown"
}

get_remote_commit_hash() {
    git ls-remote "$REPO_URL" HEAD 2>/dev/null | cut -f1 || echo "remote_unknown"
}

should_check_for_updates() {
    [ ! -f "$UPDATE_CHECK_FILE" ] && return 0
    local last_check=$(cat "$UPDATE_CHECK_FILE" 2>/dev/null || echo "0")
    local current_time=$(date +%s)
    [ $((current_time - last_check)) -gt $UPDATE_CHECK_INTERVAL ] && return 0
    return 1
}

update_last_check_timestamp() {
    echo "$(date +%s)" > "$UPDATE_CHECK_FILE"
}

check_for_updates_core() {
    local local_commit=$(get_git_commit_hash)
    local remote_commit=$(get_remote_commit_hash)
    update_last_check_timestamp

    if [ "$local_commit" = "unknown" ] || [ "$remote_commit" = "remote_unknown" ]; then
        print_warning "Could not determine local or remote version. Skipping update check."
        return 1
    fi

    if [ "$local_commit" != "$remote_commit" ]; then
        print_update "A new version is available!"
        print_update "  Current: ${local_commit:0:12}"
        print_update "  Latest:  ${remote_commit:0:12}"
        return 0 # Updates available
    fi
    print_success "Your ReconRaptor is up to date (commit: ${local_commit:0:7})."
    return 1 # No updates
    clear
}

confirm_and_perform_update() {
    echo
    print_update "╔════════════════════════════════════════════════════════════╗"
    print_update "║                     UPDATE AVAILABLE                       ║"
    print_update "║  A new version of ReconRaptor is available.                ║"
    print_update "║  Would you like to download and apply the update now?      ║"
    print_update "╚════════════════════════════════════════════════════════════╝"
    echo
    while true; do
        echo -n -e "${CYAN}[❓ PROMPT]${NC} Install update? (Y/es to update, N/o to skip): "
        read -r response
        case $response in
            [Yy]|[Yy][Ee][Ss])
                print_status "Attempting to update ReconRaptor..."
                if git pull --ff-only; then # Fast-forward only to avoid merge conflicts on runner
                    print_success "Update downloaded. Restarting script..."
                    # Ensure the runner itself is executable if it was updated
                    chmod +x "$0" 2>/dev/null || true
                    exec "$0" "$@" # Restart the script to apply changes (especially if runner itself changed)
                else
                    print_error "Automatic update failed. 'git pull' encountered issues."
                    print_warning "You might need to resolve conflicts manually or try 'git reset --hard origin/main' (or your branch name)."
                    print_status "Continuing with the current version."
                    return 1
                fi
                ;;
            [Nn]|[Nn][Oo])
                print_status "Update declined. Continuing with the current version."
                return 1
                ;;
            *) echo "Please answer (Y)es or (N)o.";;
        esac
    done
}

handle_updates_workflow() {
    local force_check="$1"
    shift # Remove the first argument, pass the rest to exec if update happens

    if [ "$force_check" = true ] || should_check_for_updates; then
        print_status "Checking for ReconRaptor updates..."
        if check_for_updates_core; then # If updates are available
            confirm_and_perform_update "$@" # Pass original script args
        fi
    else
        print_status "Skipping update check (checked recently)."
    fi
}

# --- Go Project Management ---
initialize_go_module() {
    if [ ! -f "$GO_MOD_FILE" ]; then
        print_status "Go module file ('$GO_MOD_FILE') not found. Initializing..."
        # Use the directory name as the module path for simplicity if not a standard vanity import path
        local module_name=$(basename "$(pwd)")
        go mod init "$module_name" || print_warning "Could not auto-initialize go module. 'go mod tidy' might fail."
        print_success "Go module initialized."
    else
        print_success "Go module file ('$GO_MOD_FILE') found."
    fi
}

manage_go_dependencies() {
    print_status "Managing Go dependencies..."
    # Explicitly get direct critical dependencies if they might be missing from go.mod
    # For ReconRaptor 0.2.2, main.go primarily uses "golang.org/x/time/rate"
    go get golang.org/x/time/rate 2>/dev/null || print_warning "Failed to 'go get golang.org/x/time/rate'. Check network."

    # Tidy up the module
    if go mod tidy; then
        print_success "Go dependencies are tidy."
    else
        print_warning "'go mod tidy' encountered issues. Compilation may fail."
    fi
}

needs_recompilation_check() {
    [ ! -f "$TOOL_EXECUTABLE_NAME" ] && return 0 # Binary doesn't exist
    # Check if any .go file or go.mod/go.sum is newer than the binary
    local source_file
    for source_file in *.go "$GO_MOD_FILE" go.sum; do
        if [ -f "$source_file" ] && [ "$source_file" -nt "$TOOL_EXECUTABLE_NAME" ]; then
            print_status "Changes detected in '$source_file'. Recompilation needed."
            return 0 # Needs recompilation
        fi
    done
    return 1 # No recompilation needed
    clear
}

compile_tool_binary() {
    print_status "Compiling ReconRaptor ($TOOL_EXECUTABLE_NAME from $MAIN_GO_FILE)..."
    # -s: Omit the symbol table
    # -w: Omit the DWARF symbol table (reduces binary size)
    if go build -ldflags="-s -w" -o "$TOOL_EXECUTABLE_NAME" "$MAIN_GO_FILE"; then
        print_success "ReconRaptor compiled successfully: $TOOL_EXECUTABLE_NAME"
        chmod +x "$TOOL_EXECUTABLE_NAME"
        clear
    else
        print_error "Compilation failed! Check Go environment and source code."
        exit 1
    fi
}

# --- Help Information ---
show_help_info() {
    print_header
    echo -e "${GREEN}This script automates the setup, update, compilation, and execution of ReconRaptor.${NC}"
    echo
    echo -e "${YELLOW}Usage:${NC} $0 [OPTIONS]"
    echo
    echo -e "${CYAN}Options:${NC}"
    echo -e "  ${GREEN}--force-update-check${NC}   Force check for updates, bypassing the time interval."
    echo -e "  ${GREEN}--skip-update-check${NC}    Skip the update check entirely for this run."
    echo -e "  ${GREEN}--rebuild${NC}               Force recompilation of the tool."
    echo -e "  ${GREEN}--help${NC}                  Show this help message and exit."
    echo
    echo -e "${BLUE}Workflow:${NC}"
    echo -e "  1. Checks/installs Git and Go."
    echo -e "  2. Checks for remote updates (if applicable) and prompts to apply."
    echo -e "  3. Initializes Go module and tidies dependencies."
    echo -e "  4. Compiles ReconRaptor if needed or if source files have changed."
    echo -e "  5. Executes the compiled ReconRaptor tool."
    echo
    exit 0
}

# --- Main Execution Logic ---
main_flow() {
    local skip_updates_flag=false
    local force_updates_flag=false
    local force_rebuild_flag=false
    local tool_args=() # Arguments to pass to ReconRaptor itself

    # Parse runner script arguments
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --help) show_help_info;;
            --skip-update-check) skip_updates_flag=true; shift;;
            --force-update-check) force_updates_flag=true; shift;;
            --rebuild) force_rebuild_flag=true; shift;;
            --) shift; tool_args+=("$@"); break;; # All subsequent args are for the tool
            *) tool_args+=("$1"); shift;; # Assume it's an arg for ReconRaptor
        esac
    done

    print_header

    # Pre-requisite: Check if main Go file exists
    if [ ! -f "$MAIN_GO_FILE" ]; then
        print_error "$MAIN_GO_FILE not found. Ensure you are in the ReconRaptor root directory."
        print_warning "If this is a fresh clone, there might be an issue with the repository structure or clone process."
        exit 1
    fi

    # Step 1: Ensure Git and Go are available
    install_git || exit 1
    install_golang || exit 1

    # Step 2: Handle Updates (if not skipped)
    if [ "$skip_updates_flag" = false ]; then
        handle_updates_workflow "$force_updates_flag" "${tool_args[@]}" # Pass tool_args for exec
    else
        print_status "Update check skipped by user."
    fi

    # Step 3: Go Module and Dependencies
    initialize_go_module
    manage_go_dependencies

    # Step 4: Compile Binary
    if [ "$force_rebuild_flag" = true ]; then
        print_status "Forcing rebuild as requested."
        compile_tool_binary
    elif needs_recompilation_check; then
        compile_tool_binary
    else
        print_success "ReconRaptor binary is up to date. No recompilation needed."
        clear
    fi

    # Step 5: Execute ReconRaptor
    echo
    print_status "Launching ReconRaptor..."
    echo -e "${MAGENTA}═════════════════════════════════════════════════════════════════════════════${NC}"
    echo

    # Clear screen before launching the tool for a cleaner UI
     clear 

    # Execute the compiled binary with its specific arguments
    "./$TOOL_EXECUTABLE_NAME" "${tool_args[@]}"

    echo
    echo -e "${MAGENTA}═════════════════════════════════════════════════════════════════════════════${NC}"
    print_success "ReconRaptor session ended."
}

# --- Script Entry Point ---
main_flow "$@"
