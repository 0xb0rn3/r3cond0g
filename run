#!/usr/bin/env bash
#===============================================================================
# R3COND0G Universal Launcher Script
# Version: 3.0.0
# Authors: 0xb0rn3 & 0xbv1
# Description: Cross-distribution Linux compatibility launcher
#===============================================================================

set -euo pipefail

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_VERSION="3.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONTROLLER_SCRIPT="r3cond0g_controller.py"
CORE_BINARY="r3cond0g"
LOG_FILE="/tmp/r3cond0g_setup.log"
VENV_DIR="${SCRIPT_DIR}/.venv"

# Banner
show_banner() {
    clear
    echo -e "${CYAN}"
    cat << "EOF"
    ____  _____                      _  ___   ____ 
   |  _ \|___ /  ___ ___  _ __   __| |/ _ \ / ___|
   | |_) | |_ \ / __/ _ \| '_ \ / _` | | | | |  _ 
   |  _ < ___) | (_| (_) | | | | (_| | |_| | |_| |
   |_| \_\____/ \___\___/|_| |_|\__,_|\___/ \____|
                                                   
   H E L L H O U N D   |   v3.0.0   |   0xb0rn3 & 0xbv1
EOF
    echo -e "${NC}"
    echo -e "${WHITE}   Advanced Network Reconnaissance Platform${NC}"
    echo -e "${YELLOW}   ═══════════════════════════════════════════${NC}\n"
}

# Logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >> "$LOG_FILE"
    echo -e "$*"
}

log_success() {
    log "${GREEN}✔${NC} $*"
}

log_error() {
    log "${RED}✘${NC} $*"
}

log_warning() {
    log "${YELLOW}⚠${NC} $*"
}

log_info() {
    log "${BLUE}ℹ${NC} $*"
}

# Detect Linux distribution
detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$ID
        VER=$VERSION_ID
        DISTRO_NAME=$NAME
    elif type lsb_release >/dev/null 2>&1; then
        OS=$(lsb_release -si | tr '[:upper:]' '[:lower:]')
        VER=$(lsb_release -sr)
        DISTRO_NAME=$(lsb_release -sd)
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        OS=$(echo $DISTRIB_ID | tr '[:upper:]' '[:lower:]')
        VER=$DISTRIB_RELEASE
        DISTRO_NAME=$DISTRIB_DESCRIPTION
    elif [ -f /etc/debian_version ]; then
        OS=debian
        VER=$(cat /etc/debian_version)
        DISTRO_NAME="Debian $VER"
    elif [ -f /etc/redhat-release ]; then
        OS=rhel
        DISTRO_NAME=$(cat /etc/redhat-release)
    elif [ -f /etc/alpine-release ]; then
        OS=alpine
        VER=$(cat /etc/alpine-release)
        DISTRO_NAME="Alpine Linux $VER"
    else
        OS=$(uname -s)
        VER=$(uname -r)
        DISTRO_NAME="$OS $VER"
    fi
}

# Check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        log_warning "Running as root. Some features may require standard user privileges."
        echo -n "Continue anyway? (y/N): "
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Install system dependencies based on distribution
install_system_deps() {
    log_info "Installing system dependencies for $DISTRO_NAME..."
    
    case "$OS" in
        ubuntu|debian|linuxmint|pop|elementary|zorin)
            log_info "Detected Debian-based system"
            sudo apt-get update -qq
            sudo apt-get install -y -qq \
                python3 python3-pip python3-venv \
                golang-go git build-essential \
                libpcap-dev tcpdump \
                graphviz nmap \
                curl wget net-tools \
                iputils-ping dnsutils \
                2>&1 | tee -a "$LOG_FILE" > /dev/null
            ;;
            
        fedora|rhel|centos|rocky|almalinux|oracle)
            log_info "Detected RHEL-based system"
            sudo dnf install -y \
                python3 python3-pip python3-virtualenv \
                golang git gcc make \
                libpcap-devel tcpdump \
                graphviz nmap \
                curl wget net-tools \
                iputils bind-utils \
                2>&1 | tee -a "$LOG_FILE" > /dev/null
            ;;
            
        arch|manjaro|endeavouros|garuda)
            log_info "Detected Arch-based system"
            sudo pacman -Sy --noconfirm --needed \
                python python-pip python-virtualenv \
                go git base-devel \
                libpcap tcpdump \
                graphviz nmap \
                curl wget net-tools \
                iputils bind \
                2>&1 | tee -a "$LOG_FILE" > /dev/null
            ;;
            
        opensuse*|suse)
            log_info "Detected openSUSE/SUSE system"
            sudo zypper install -y \
                python3 python3-pip python3-virtualenv \
                go git gcc make \
                libpcap-devel tcpdump \
                graphviz nmap \
                curl wget net-tools \
                iputils bind-utils \
                2>&1 | tee -a "$LOG_FILE" > /dev/null
            ;;
            
        alpine)
            log_info "Detected Alpine Linux"
            sudo apk add --no-cache \
                python3 py3-pip py3-virtualenv \
                go git gcc musl-dev \
                libpcap-dev tcpdump \
                graphviz nmap \
                curl wget net-tools \
                iputils bind-tools \
                2>&1 | tee -a "$LOG_FILE" > /dev/null
            ;;
            
        gentoo)
            log_info "Detected Gentoo Linux"
            sudo emerge --ask=n \
                dev-lang/python dev-python/pip dev-python/virtualenv \
                dev-lang/go dev-vcs/git \
                net-libs/libpcap net-analyzer/tcpdump \
                media-gfx/graphviz net-analyzer/nmap \
                net-misc/curl net-misc/wget sys-apps/net-tools \
                net-misc/iputils net-dns/bind-tools \
                2>&1 | tee -a "$LOG_FILE" > /dev/null
            ;;
            
        void)
            log_info "Detected Void Linux"
            sudo xbps-install -Sy \
                python3 python3-pip python3-virtualenv \
                go git gcc make \
                libpcap-devel tcpdump \
                graphviz nmap \
                curl wget net-tools \
                iputils bind-utils \
                2>&1 | tee -a "$LOG_FILE" > /dev/null
            ;;
            
        nixos)
            log_info "Detected NixOS"
            log_warning "NixOS requires manual configuration in configuration.nix"
            log_info "Add these packages: python3 go git libpcap tcpdump graphviz nmap"
            ;;
            
        kali|parrot)
            log_info "Detected Security-focused distribution"
            sudo apt-get update -qq
            sudo apt-get install -y -qq \
                python3 python3-pip python3-venv \
                golang-go git build-essential \
                libpcap-dev tcpdump \
                graphviz nmap \
                2>&1 | tee -a "$LOG_FILE" > /dev/null
            ;;
            
        *)
            log_warning "Unknown distribution: $OS"
            log_info "Attempting generic installation..."
            # Try common package managers
            if command -v apt-get >/dev/null 2>&1; then
                sudo apt-get update && sudo apt-get install -y python3 python3-pip golang-go git
            elif command -v yum >/dev/null 2>&1; then
                sudo yum install -y python3 python3-pip golang git
            elif command -v pacman >/dev/null 2>&1; then
                sudo pacman -Sy --noconfirm python python-pip go git
            else
                log_error "Unable to install dependencies automatically"
                log_info "Please install manually: Python 3.8+, Go 1.21+, Git"
                return 1
            fi
            ;;
    esac
    
    log_success "System dependencies installed"
}

# Check command availability
check_command() {
    if ! command -v "$1" >/dev/null 2>&1; then
        return 1
    fi
    return 0
}

# Verify installations
verify_dependencies() {
    local missing_deps=()
    
    log_info "Verifying dependencies..."
    
    # Check Python
    if check_command python3; then
        PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
        log_success "Python $PYTHON_VERSION found"
    else
        missing_deps+=("python3")
    fi
    
    # Check Go
    if check_command go; then
        GO_VERSION=$(go version | awk '{print $3}')
        log_success "Go $GO_VERSION found"
    else
        missing_deps+=("go")
    fi
    
    # Check Git
    if check_command git; then
        GIT_VERSION=$(git --version | awk '{print $3}')
        log_success "Git $GIT_VERSION found"
    else
        missing_deps+=("git")
    fi
    
    # Check optional tools
    for tool in nmap tcpdump; do
        if check_command $tool; then
            log_success "$tool found"
        else
            log_warning "$tool not found (optional)"
        fi
    done
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        log_error "Missing required dependencies: ${missing_deps[*]}"
        return 1
    fi
    
    return 0
}

# Setup Python virtual environment
setup_python_env() {
    log_info "Setting up Python virtual environment..."
    
    # Create virtual environment
    if [ ! -d "$VENV_DIR" ]; then
        python3 -m venv "$VENV_DIR" 2>&1 | tee -a "$LOG_FILE" > /dev/null
        log_success "Virtual environment created"
    else
        log_info "Virtual environment already exists"
    fi
    
    # Activate virtual environment
    source "$VENV_DIR/bin/activate"
    
    # Upgrade pip
    pip install --upgrade pip setuptools wheel 2>&1 | tee -a "$LOG_FILE" > /dev/null
    
    # Install Python requirements
    if [ -f "requirements.txt" ]; then
        log_info "Installing Python dependencies..."
        pip install -r requirements.txt 2>&1 | tee -a "$LOG_FILE" > /dev/null
        log_success "Python dependencies installed"
    else
        # Create requirements.txt if it doesn't exist
        cat > requirements.txt << 'EOF'
rich>=13.0.0
requests>=2.31.0
pyyaml>=6.0
networkx>=3.0
matplotlib>=3.7.0
EOF
        pip install -r requirements.txt 2>&1 | tee -a "$LOG_FILE" > /dev/null
    fi
}

# Build Go binary
build_go_binary() {
    log_info "Building R3COND0G core binary..."
    
    # Initialize Go module if needed
    if [ ! -f "go.mod" ]; then
        go mod init r3cond0g 2>&1 | tee -a "$LOG_FILE" > /dev/null
    fi
    
    # Download dependencies
    go mod tidy 2>&1 | tee -a "$LOG_FILE" > /dev/null
    
    # Build with optimizations
    CGO_ENABLED=1 go build -ldflags="-s -w" -o "$CORE_BINARY" main.go 2>&1 | tee -a "$LOG_FILE" > /dev/null
    
    if [ -f "$CORE_BINARY" ]; then
        chmod +x "$CORE_BINARY"
        log_success "Core binary built successfully"
        
        # Set capabilities for raw socket access (if not root)
        if [[ $EUID -ne 0 ]]; then
            if command -v setcap >/dev/null 2>&1; then
                sudo setcap cap_net_raw,cap_net_admin=eip "./$CORE_BINARY" 2>/dev/null || \
                    log_warning "Could not set capabilities. ICMP scanning may require sudo."
            fi
        fi
    else
        log_error "Failed to build core binary"
        return 1
    fi
}

# Generate probe definitions
generate_probes() {
    log_info "Generating probe definitions..."
    
    mkdir -p probes
    
    # Activate virtual environment
    source "$VENV_DIR/bin/activate"
    
    # Generate probes using controller
    python3 "$CONTROLLER_SCRIPT" --generate-probes 2>&1 | tee -a "$LOG_FILE" > /dev/null
    
    if [ -f "probes/tcp_probes.json" ] && [ -f "probes/udp_probes.json" ]; then
        log_success "Probe definitions generated"
    else
        log_warning "Probe generation incomplete"
    fi
}

# System optimization
optimize_system() {
    log_info "Applying system optimizations..."
    
    # Only apply if running with appropriate privileges
    if [[ $EUID -eq 0 ]] || command -v sudo >/dev/null 2>&1; then
        # Increase file descriptor limits
        if [ -f /etc/security/limits.conf ]; then
            if ! grep -q "r3cond0g" /etc/security/limits.conf; then
                echo "# R3COND0G optimizations" | sudo tee -a /etc/security/limits.conf > /dev/null
                echo "* soft nofile 65535" | sudo tee -a /etc/security/limits.conf > /dev/null
                echo "* hard nofile 65535" | sudo tee -a /etc/security/limits.conf > /dev/null
            fi
        fi
        
        # Apply network optimizations (temporary)
        sudo sysctl -w net.ipv4.tcp_fin_timeout=30 2>/dev/null || true
        sudo sysctl -w net.ipv4.tcp_tw_reuse=1 2>/dev/null || true
        sudo sysctl -w net.core.somaxconn=1024 2>/dev/null || true
        
        log_success "System optimizations applied"
    else
        log_warning "Skipping system optimizations (requires root)"
    fi
}

# Create desktop entry for GUI systems
create_desktop_entry() {
    if [ -n "${XDG_DATA_HOME:-}" ] || [ -n "${HOME:-}" ]; then
        DESKTOP_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/applications"
        if [ -d "$DESKTOP_DIR" ] || mkdir -p "$DESKTOP_DIR" 2>/dev/null; then
            cat > "$DESKTOP_DIR/r3cond0g.desktop" << EOF
[Desktop Entry]
Name=R3COND0G
Comment=Advanced Network Reconnaissance Platform
Exec=$SCRIPT_DIR/run --interactive
Icon=$SCRIPT_DIR/assets/icon.png
Terminal=true
Type=Application
Categories=Network;Security;
Keywords=network;scanner;security;reconnaissance;
EOF
            log_info "Desktop entry created"
        fi
    fi
}

# Main setup function
setup() {
    show_banner
    
    log_info "Starting R3COND0G setup..."
    log_info "System: $DISTRO_NAME"
    log_info "Architecture: $(uname -m)"
    
    # Check root
    check_root
    
    # Install dependencies
    if [ "${SKIP_DEPS:-0}" != "1" ]; then
        install_system_deps || exit 1
    fi
    
    # Verify dependencies
    verify_dependencies || exit 1
    
    # Setup Python environment
    setup_python_env || exit 1
    
    # Build Go binary
    if [ ! -f "$CORE_BINARY" ] || [ "${FORCE_BUILD:-0}" == "1" ]; then
        build_go_binary || exit 1
    else
        log_info "Core binary already exists"
    fi
    
    # Generate probes
    generate_probes
    
    # System optimizations
    optimize_system
    
    # Create desktop entry
    create_desktop_entry
    
    log_success "Setup completed successfully!"
    echo ""
}

# Run the controller
run_controller() {
    # Activate virtual environment
    if [ -d "$VENV_DIR" ]; then
        source "$VENV_DIR/bin/activate"
    fi
    
    # Check if controller exists
    if [ ! -f "$CONTROLLER_SCRIPT" ]; then
        log_error "Controller script not found: $CONTROLLER_SCRIPT"
        exit 1
    fi
    
    # Run with arguments
    python3 "$CONTROLLER_SCRIPT" "$@"
}

# Quick scan function
quick_scan() {
    local target="${1:-192.168.1.0/24}"
    local profile="${2:-discovery}"
    
    show_banner
    log_info "Running quick scan..."
    log_info "Target: $target"
    log_info "Profile: $profile"
    
    run_controller --scan "$profile" --targets "$target" --report html
}

# Show help
show_help() {
    show_banner
    cat << EOF
Usage: $0 [OPTIONS] [ARGUMENTS]

OPTIONS:
    setup               Run initial setup and install dependencies
    scan <target>       Quick scan with default settings
    interactive         Launch interactive mode
    build              Build/rebuild the core binary
    update             Update dependencies and rebuild
    clean              Clean temporary files and caches
    help               Show this help message

DIRECT EXECUTION:
    $0                  Launch interactive mode (default)
    $0 <args>           Pass arguments to controller

EXAMPLES:
    $0 setup                        # Initial setup
    $0 scan 192.168.1.0/24         # Quick network scan
    $0 interactive                  # Interactive menu
    $0 --scan aggressive --targets 10.0.0.0/24
    $0 --import-nmap results.xml --report all

ENVIRONMENT VARIABLES:
    SKIP_DEPS=1         Skip dependency installation
    FORCE_BUILD=1       Force rebuild of core binary
    NO_VENV=1          Don't use virtual environment

EOF
}

# Main execution
main() {
    cd "$SCRIPT_DIR"
    
    # Parse first argument
    case "${1:-}" in
        setup)
            setup
            ;;
        scan)
            shift
            quick_scan "$@"
            ;;
        interactive|--interactive|-i)
            shift
            run_controller --interactive "$@"
            ;;
        build|--build)
            FORCE_BUILD=1 build_go_binary
            ;;
        update|--update)
            log_info "Updating R3COND0G..."
            git pull 2>/dev/null || log_warning "Not a git repository"
            setup_python_env
            FORCE_BUILD=1 build_go_binary
            generate_probes
            log_success "Update complete"
            ;;
        clean|--clean)
            log_info "Cleaning temporary files..."
            rm -rf __pycache__ *.pyc .coverage htmlcov
            rm -rf reports_* optimization_config.json
            rm -f "$LOG_FILE"
            log_success "Cleanup complete"
            ;;
        help|--help|-h)
            show_help
            ;;
        "")
            # No arguments - run interactive mode
            if [ ! -f "$CORE_BINARY" ]; then
                log_info "First run detected. Running setup..."
                setup
                echo ""
                log_info "Launching interactive mode..."
                sleep 2
            fi
            run_controller --interactive
            ;;
        *)
            # Pass all arguments to controller
            run_controller "$@"
            ;;
    esac
}

# Handle interrupts
trap 'echo -e "\n${YELLOW}Interrupted by user${NC}"; exit 130' INT TERM

# Execute main function
main "$@"
