#!/usr/bin/env bash

# r3cond0g Runner Script v0.1
# Automated setup, compilation, and execution

set -e  # Exit on any error

# Colors for minimal visual feedback
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print status messages
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[✓]${NC} $1"
}

print_error() {
    echo -e "${RED}[✗]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

# Function to detect OS
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v apt-get &> /dev/null; then
            echo "ubuntu"
        elif command -v yum &> /dev/null; then
            echo "centos"
        elif command -v pacman &> /dev/null; then
            echo "arch"
        else
            echo "linux"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        echo "windows"
    else
        echo "unknown"
    fi
}

# Function to install Go based on OS
install_golang() {
    local os=$(detect_os)
    print_status "Installing Go for $os..."
    
    case $os in
        "ubuntu")
            sudo apt-get update -qq 2>/dev/null
            sudo apt-get install -y golang-go wget curl 2>/dev/null
            ;;
        "centos")
            sudo yum install -y golang wget curl 2>/dev/null
            ;;
        "arch")
            sudo pacman -S --noconfirm go wget curl 2>/dev/null
            ;;
        "macos")
            if command -v brew &> /dev/null; then
                brew install go 2>/dev/null
            else
                print_error "Homebrew not found. Please install Go manually from https://golang.org/dl/"
                exit 1
            fi
            ;;
        "windows")
            print_warning "Windows detected. Please install Go manually from https://golang.org/dl/"
            print_warning "Then run this script in Git Bash or WSL"
            exit 1
            ;;
        *)
            print_error "Unsupported OS. Please install Go manually from https://golang.org/dl/"
            exit 1
            ;;
    esac
}

# Function to check if Go is installed
check_golang() {
    if ! command -v go &> /dev/null; then
        print_warning "Go not found. Installing..."
        install_golang
        print_success "Go installation completed"
    else
        print_success "Go found: $(go version | cut -d' ' -f3)"
    fi
}

# Function to initialize Go module if needed
init_go_module() {
    if [ ! -f "go.mod" ]; then
        print_status "Initializing Go module..."
        go mod init r3cond0g 2>/dev/null
        print_success "Go module initialized"
    fi
}

# Function to install dependencies
install_dependencies() {
    print_status "Installing Go dependencies..."
    
    # Add required dependencies to go.mod
    go get github.com/google/gopacket 2>/dev/null || true
    go get github.com/google/gopacket/pcap 2>/dev/null || true
    go get github.com/google/gopacket/layers 2>/dev/null || true
    go get gonum.org/v1/gonum/graph 2>/dev/null || true
    go get gonum.org/v1/gonum/graph/encoding/dot 2>/dev/null || true
    go get gonum.org/v1/gonum/graph/simple 2>/dev/null || true
    
    go mod tidy 2>/dev/null
    print_success "Dependencies installed"
}

# Function to compile the binary
compile_binary() {
    print_status "Compiling r3cond0g..."
    if go build -ldflags="-s -w" -o r3cond0g main.go 2>/dev/null; then
        print_success "Compilation successful"
        chmod +x r3cond0g
    else
        print_error "Compilation failed"
        exit 1
    fi
}

# Function to check if binary needs recompilation
needs_recompilation() {
    if [ ! -f "r3cond0g" ]; then
        return 0  # Binary doesn't exist
    fi
    
    if [ "main.go" -nt "r3cond0g" ]; then
        return 0  # Source is newer than binary
    fi
    
    return 1  # Binary is up to date
}

# Function to update README.md
update_readme() {
    if [ -f "README.md" ]; then
        # Backup existing README
        cp README.md README.md.bak 2>/dev/null || true
    fi
    
# Main execution flow
main() {
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║         r3cond0g Runner v0.1 by 0xb0rn3 | 0xbv1             ║"
    echo "║             Setup Environment setup script!                 ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo

    # Check if we're in the right directory
    if [ ! -f "main.go" ]; then
        print_error "main.go not found. Please run this script from the r3cond0g directory."
        exit 1
    fi

    # Step 1: Check Go installation
    check_golang

    # Step 2: Initialize Go module
    init_go_module

    # Step 3: Install dependencies
    install_dependencies

    # Step 4: Check if compilation is needed
    if needs_recompilation; then
        compile_binary
    else
        print_success "Binary is up to date"
    fi

    # Step 5: Execute the tool
    echo
    print_success "Setup complete! Launching r3cond0g..."
    echo "════════════════════════════════════════════════════════════════"
    echo
    
    # Execute the compiled binary
    ./r3cond0g
}

# Run main function
main "$@"
