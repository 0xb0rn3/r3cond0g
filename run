#!/bin/bash

# R3COND0G Setup Script
# Advanced Network Reconnaissance Platform
# Version: 3.0.0

set -e

echo "ü¶Ö R3COND0G Setup & Installation Script"
echo "========================================"

# Check if running as root for some operations
if [[ $EUID -ne 0 && "$1" != "--user" ]]; then
   echo "Note: Some operations may require sudo privileges"
   echo "Run with --user flag for user-only installation"
fi

# Detect package manager and OS
detect_package_manager() {
    if command -v apt-get &> /dev/null; then
        PKG_MANAGER="apt"
        OS_FAMILY="debian"
    elif command -v dnf &> /dev/null; then
        PKG_MANAGER="dnf"
        OS_FAMILY="redhat"
    elif command -v yum &> /dev/null; then
        PKG_MANAGER="yum"
        OS_FAMILY="redhat"
    elif command -v zypper &> /dev/null; then
        PKG_MANAGER="zypper"
        OS_FAMILY="suse"
    elif command -v pacman &> /dev/null; then
        PKG_MANAGER="pacman"
        OS_FAMILY="arch"
    elif command -v emerge &> /dev/null; then
        PKG_MANAGER="emerge"
        OS_FAMILY="gentoo"
    elif command -v apk &> /dev/null; then
        PKG_MANAGER="apk"
        OS_FAMILY="alpine"
    elif command -v pkg &> /dev/null; then
        PKG_MANAGER="pkg"
        OS_FAMILY="freebsd"
    elif command -v brew &> /dev/null; then
        PKG_MANAGER="brew"
        OS_FAMILY="macos"
    elif command -v port &> /dev/null; then
        PKG_MANAGER="port"
        OS_FAMILY="macos"
    elif command -v pkgin &> /dev/null; then
        PKG_MANAGER="pkgin"
        OS_FAMILY="netbsd"
    elif command -v pkg_add &> /dev/null; then
        PKG_MANAGER="pkg_add"
        OS_FAMILY="openbsd"
    elif command -v xbps-install &> /dev/null; then
        PKG_MANAGER="xbps"
        OS_FAMILY="void"
    elif command -v nix-env &> /dev/null; then
        PKG_MANAGER="nix"
        OS_FAMILY="nixos"
    elif command -v guix &> /dev/null; then
        PKG_MANAGER="guix"
        OS_FAMILY="guix"
    elif command -v snap &> /dev/null; then
        PKG_MANAGER="snap"
        OS_FAMILY="universal"
    elif command -v flatpak &> /dev/null; then
        PKG_MANAGER="flatpak"
        OS_FAMILY="universal"
    else
        PKG_MANAGER="unknown"
        OS_FAMILY="unknown"
    fi
    
    echo "Detected: $OS_FAMILY ($PKG_MANAGER)"
}

# Install system dependencies
install_system_deps() {
    echo "üì¶ Installing system dependencies..."
    
    detect_package_manager
    
    case $PKG_MANAGER in
        apt)
            echo "üêß Debian/Ubuntu detected"
            sudo apt-get update
            sudo apt-get install -y \
                golang-go \
                python3 \
                python3-pip \
                python3-venv \
                python3-dev \
                git \
                nmap \
                masscan \
                build-essential \
                libpcap-dev \
                graphviz \
                curl \
                wget \
                ca-certificates
            ;;
        
        dnf)
            echo "üé© Fedora/RHEL 8+ detected"
            sudo dnf update -y
            sudo dnf install -y \
                golang \
                python3 \
                python3-pip \
                python3-devel \
                git \
                nmap \
                masscan \
                gcc \
                gcc-c++ \
                make \
                libpcap-devel \
                graphviz \
                curl \
                wget \
                ca-certificates
            ;;
        
        yum)
            echo "üé© CentOS/RHEL 7 detected"
            sudo yum update -y
            # Enable EPEL for additional packages
            sudo yum install -y epel-release
            sudo yum install -y \
                golang \
                python3 \
                python3-pip \
                python3-devel \
                git \
                nmap \
                gcc \
                gcc-c++ \
                make \
                libpcap-devel \
                graphviz \
                curl \
                wget \
                ca-certificates
            # Try to install masscan from EPEL or compile
            sudo yum install -y masscan || echo "‚ö†Ô∏è  masscan not available, will skip"
            ;;
        
        zypper)
            echo "ü¶é openSUSE detected"
            sudo zypper refresh
            sudo zypper install -y \
                go \
                python3 \
                python3-pip \
                python3-devel \
                git \
                nmap \
                gcc \
                gcc-c++ \
                make \
                libpcap-devel \
                graphviz \
                curl \
                wget \
                ca-certificates
            ;;
        
        pacman)
            echo "üèπ Arch Linux detected"
            sudo pacman -Syu --noconfirm
            sudo pacman -S --noconfirm \
                go \
                python \
                python-pip \
                git \
                nmap \
                masscan \
                base-devel \
                libpcap \
                graphviz \
                curl \
                wget \
                ca-certificates
            ;;
        
        emerge)
            echo "üêß Gentoo detected"
            sudo emerge --sync
            sudo emerge -av \
                dev-lang/go \
                dev-lang/python \
                dev-python/pip \
                dev-vcs/git \
                net-analyzer/nmap \
                net-analyzer/masscan \
                sys-devel/gcc \
                sys-devel/make \
                net-libs/libpcap \
                media-gfx/graphviz \
                net-misc/curl \
                net-misc/wget \
                app-misc/ca-certificates
            ;;
        
        apk)
            echo "üèîÔ∏è Alpine Linux detected"
            sudo apk update
            sudo apk add \
                go \
                python3 \
                py3-pip \
                python3-dev \
                git \
                nmap \
                build-base \
                libpcap-dev \
                graphviz \
                curl \
                wget \
                ca-certificates
            ;;
        
        pkg)
            echo "üòà FreeBSD detected"
            sudo pkg update
            sudo pkg install -y \
                go \
                python3 \
                py39-pip \
                git \
                nmap \
                masscan \
                gcc \
                gmake \
                libpcap \
                graphviz \
                curl \
                wget \
                ca_root_nss
            ;;
        
        brew)
            echo "üçé macOS (Homebrew) detected"
            brew update
            brew install \
                go \
                python3 \
                git \
                nmap \
                masscan \
                libpcap \
                graphviz \
                curl \
                wget
            ;;
        
        port)
            echo "üçé macOS (MacPorts) detected"
            sudo port selfupdate
            sudo port install \
                go \
                python39 \
                py39-pip \
                git \
                nmap \
                libpcap \
                graphviz \
                curl \
                wget
            ;;
        
        pkgin)
            echo "üê° NetBSD detected"
            sudo pkgin update
            sudo pkgin install \
                go \
                python39 \
                py39-pip \
                git \
                nmap \
                gcc7 \
                gmake \
                libpcap \
                graphviz \
                curl \
                wget
            ;;
        
        pkg_add)
            echo "üê° OpenBSD detected"
            sudo pkg_add \
                go \
                python3 \
                py3-pip \
                git \
                nmap \
                gcc \
                gmake \
                libpcap \
                graphviz \
                curl \
                wget
            ;;
        
        xbps)
            echo "üï≥Ô∏è Void Linux detected"
            sudo xbps-install -Syu
            sudo xbps-install -y \
                go \
                python3 \
                python3-pip \
                python3-devel \
                git \
                nmap \
                masscan \
                base-devel \
                libpcap-devel \
                graphviz \
                curl \
                wget \
                ca-certificates
            ;;
        
        nix)
            echo "‚ùÑÔ∏è NixOS detected"
            nix-env -iA \
                nixpkgs.go \
                nixpkgs.python3 \
                nixpkgs.python3Packages.pip \
                nixpkgs.git \
                nixpkgs.nmap \
                nixpkgs.masscan \
                nixpkgs.gcc \
                nixpkgs.gnumake \
                nixpkgs.libpcap \
                nixpkgs.graphviz \
                nixpkgs.curl \
                nixpkgs.wget \
                nixpkgs.cacert
            ;;
        
        guix)
            echo "üêÉ Guix detected"
            guix install \
                go \
                python \
                python-pip \
                git \
                nmap \
                gcc-toolchain \
                make \
                libpcap \
                graphviz \
                curl \
                wget \
                nss-certs
            ;;
        
        snap)
            echo "üì¶ Snap detected (universal packages)"
            sudo snap install go --classic
            sudo snap install nmap
            # Python usually pre-installed on snap systems
            echo "‚ö†Ô∏è  Install python3, pip, git via system package manager"
            ;;
        
        flatpak)
            echo "üì¶ Flatpak detected (universal packages)"
            echo "‚ö†Ô∏è  Flatpak not suitable for development tools"
            echo "‚ö†Ô∏è  Please install via system package manager"
            ;;
        
        *)
            echo "‚ùå Unknown package manager: $PKG_MANAGER"
            echo ""
            echo "üîß Manual Installation Required:"
            echo "Please install the following packages manually:"
            echo ""
            echo "Required packages:"
            echo "  - Go 1.19+ (golang)"
            echo "  - Python 3.8+ (python3)"
            echo "  - Python pip (python3-pip)"
            echo "  - Git (git)"
            echo "  - Build tools (gcc, make)"
            echo "  - libpcap development files"
            echo ""
            echo "Optional packages:"
            echo "  - nmap"
            echo "  - masscan"
            echo "  - graphviz"
            echo ""
            echo "üìã Distribution-specific commands:"
            case "$OSTYPE" in
                linux*)
                    echo "  Linux: Check your distribution's package manager documentation"
                    ;;
                darwin*)
                    echo "  macOS: Install Homebrew (https://brew.sh) or MacPorts"
                    ;;
                freebsd*)
                    echo "  FreeBSD: pkg install <package>"
                    ;;
                *)
                    echo "  Check your OS documentation for package installation"
                    ;;
            esac
            echo ""
            read -p "Continue anyway? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 1
            fi
            ;;
    esac
    
    echo "‚úÖ System dependencies installation completed"
}

# Setup Python virtual environment
setup_python_env() {
    echo "üêç Setting up Python environment..."
    
    # Detect Python command
    PYTHON_CMD=""
    if command -v python3 &> /dev/null; then
        PYTHON_CMD="python3"
    elif command -v python &> /dev/null; then
        # Check if it's Python 3
        if python --version 2>&1 | grep -q "Python 3"; then
            PYTHON_CMD="python"
        fi
    fi
    
    if [ -z "$PYTHON_CMD" ]; then
        echo "‚ùå Python 3 not found. Please install Python 3.8+ first."
        exit 1
    fi
    
    echo "Using Python: $($PYTHON_CMD --version)"
    
    # Detect pip command
    PIP_CMD=""
    if command -v pip3 &> /dev/null; then
        PIP_CMD="pip3"
    elif command -v pip &> /dev/null; then
        # Check if pip belongs to Python 3
        if pip --version 2>&1 | grep -q "python 3"; then
            PIP_CMD="pip"
        fi
    fi
    
    if [ -z "$PIP_CMD" ]; then
        echo "‚ùå pip for Python 3 not found. Please install python3-pip."
        exit 1
    fi
    
    # Create virtual environment
    if [ ! -d "venv" ]; then
        echo "Creating virtual environment..."
        if command -v virtualenv &> /dev/null; then
            virtualenv -p $PYTHON_CMD venv
        else
            $PYTHON_CMD -m venv venv
        fi
    fi
    
    # Activate virtual environment
    echo "Activating virtual environment..."
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
    elif [ -f "venv/Scripts/activate" ]; then
        # Windows/MSYS2
        source venv/Scripts/activate
    else
        echo "‚ùå Virtual environment activation script not found"
        exit 1
    fi
    
    # Upgrade pip
    echo "Upgrading pip..."
    pip install --upgrade pip setuptools wheel
    
    # Install Python dependencies
    echo "Installing Python dependencies..."
    if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
    else
        echo "Creating requirements.txt..."
        cat > requirements.txt << EOF
rich>=13.0.0
networkx>=3.0
matplotlib>=3.5.0
requests>=2.28.0
pyyaml>=6.0
EOF
        pip install -r requirements.txt
    fi
    
    echo "‚úÖ Python environment setup complete"
}

# Build Go core with cross-platform support
build_core() {
    echo "üî® Building R3COND0G core..."
    
    # Check if Go is installed
    if ! command -v go &> /dev/null; then
        echo "‚ùå Go is not installed. Please install Go 1.19+ first."
        
        echo ""
        echo "üì• Go Installation Instructions:"
        case "$OSTYPE" in
            linux*)
                echo "  Ubuntu/Debian: sudo apt install golang-go"
                echo "  RHEL/CentOS: sudo dnf install golang"
                echo "  Arch: sudo pacman -S go"
                echo "  Or download from: https://golang.org/dl/"
                ;;
            darwin*)
                echo "  Homebrew: brew install go"
                echo "  MacPorts: sudo port install go"
                echo "  Or download from: https://golang.org/dl/"
                ;;
            msys*|cygwin*)
                echo "  Download from: https://golang.org/dl/"
                echo "  Or use: choco install golang (if Chocolatey installed)"
                ;;
            *)
                echo "  Download from: https://golang.org/dl/"
                ;;
        esac
        exit 1
    fi
    
    echo "Using Go: $(go version)"
    
    # Check Go version
    GO_VERSION=$(go version | grep -oE 'go[0-9]+\.[0-9]+' | sed 's/go//')
    REQUIRED_VERSION="1.19"
    
    if ! printf '%s\n%s\n' "$REQUIRED_VERSION" "$GO_VERSION" | sort -V -C; then
        echo "‚ö†Ô∏è  Go version $GO_VERSION detected. Recommended: $REQUIRED_VERSION+"
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    # Initialize Go module if needed
    if [ ! -f "go.mod" ]; then
        echo "Initializing Go module..."
        go mod init r3cond0g
    fi
    
    # Clean and download dependencies
    echo "Downloading Go dependencies..."
    go mod tidy
    go mod download
    
    # Build with optimizations
    echo "Building optimized binary..."
    
    # Platform-specific build settings
    BUILD_FLAGS="-ldflags=-s -w"
    OUTPUT_NAME="r3cond0g"
    
    case "$OSTYPE" in
        msys*|cygwin*)
            OUTPUT_NAME="r3cond0g.exe"
            ;;
    esac
    
    # Build with CGO disabled for better portability
    CGO_ENABLED=0 go build $BUILD_FLAGS -o $OUTPUT_NAME main.go
    
    # Set executable permissions (Unix-like systems)
    if [ "$OSTYPE" != "msys" ] && [ "$OSTYPE" != "cygwin" ]; then
        chmod +x $OUTPUT_NAME
    fi
    
    # Cross-compile for common platforms if requested
    if [ "$1" = "--cross-compile" ]; then
        echo "Cross-compiling for multiple platforms..."
        
        platforms=(
            "linux/amd64"
            "linux/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
            "freebsd/amd64"
        )
        
        for platform in "${platforms[@]}"; do
            GOOS=${platform%/*}
            GOARCH=${platform#*/}
            output="r3cond0g_${GOOS}_${GOARCH}"
            
            if [ "$GOOS" = "windows" ]; then
                output="${output}.exe"
            fi
            
            echo "Building for $platform..."
            CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build $BUILD_FLAGS -o $output main.go
        done
    fi
    
    echo "‚úÖ Core binary built successfully"
}

# Create initial configuration
setup_config() {
    echo "‚öôÔ∏è  Setting up initial configuration..."
    
    # Create directories
    mkdir -p probes
    mkdir -p reports
    mkdir -p cache
    
    # Generate initial probe definitions
    python3 r3cond0g_controller.py --generate-probes
    
    # Generate default configurations
    python3 -c "
from r3cond0g_controller import R3COND0GController
controller = R3COND0GController()
controller.generate_config('default')
controller.generate_config('stealth')
controller.generate_config('aggressive')
controller.generate_config('discovery')
"
    
    echo "‚úÖ Initial configuration complete"
}

# Setup capabilities for raw sockets (Linux only)
setup_capabilities() {
    if [[ "$OSTYPE" == "linux-gnu"* ]] && command -v setcap &> /dev/null; then
        echo "üîê Setting up network capabilities..."
        
        if [[ $EUID -ne 0 ]]; then
            echo "Requesting sudo for network capabilities..."
            sudo setcap cap_net_raw,cap_net_admin=eip ./r3cond0g
        else
            setcap cap_net_raw,cap_net_admin=eip ./r3cond0g
        fi
        
        echo "‚úÖ Network capabilities configured"
    fi
}

# Run tests
run_tests() {
    echo "üß™ Running tests..."
    
    # Test Go compilation
    if [ -f "r3cond0g" ]; then
        echo "‚úÖ Go binary exists"
    else
        echo "‚ùå Go binary not found"
        exit 1
    fi
    
    # Test Python controller
    source venv/bin/activate
    python3 -c "from r3cond0g_controller import R3COND0GController; print('‚úÖ Python controller imports successfully')"
    
    # Test basic functionality
    ./r3cond0g --help > /dev/null 2>&1 && echo "‚úÖ Core binary responds to --help"
    
    echo "‚úÖ All tests passed"
}

# Create desktop entry (Linux)
create_desktop_entry() {
    if [[ "$OSTYPE" == "linux-gnu"* ]] && [ -d "$HOME/.local/share/applications" ]; then
        echo "üñ•Ô∏è  Creating desktop entry..."
        
        cat > "$HOME/.local/share/applications/r3cond0g.desktop" << EOF
[Desktop Entry]
Name=R3COND0G
Comment=Advanced Network Reconnaissance Platform
Exec=bash -c "cd $(pwd) && source venv/bin/activate && python3 r3cond0g_controller.py --interactive"
Icon=$(pwd)/logo.png
Terminal=true
Type=Application
Categories=Network;Security;System;
EOF
        
        echo "‚úÖ Desktop entry created"
    fi
}

# Show usage information
show_usage() {
    echo ""
    echo "üéØ R3COND0G is now ready!"
    echo ""
    echo "Usage Examples:"
    echo "  # Interactive mode"
    echo "  python3 r3cond0g_controller.py --interactive"
    echo ""
    echo "  # Build core"
    echo "  python3 r3cond0g_controller.py --build --optimize"
    echo ""
    echo "  # Quick scan"
    echo "  python3 r3cond0g_controller.py --scan default --targets 192.168.1.1"
    echo ""
    echo "  # Generate reports"
    echo "  python3 r3cond0g_controller.py --report html"
    echo ""
    echo "Core Binary Usage:"
    echo "  # Direct usage"
    echo "  ./r3cond0g -target-host 192.168.1.1 -port-range 1-1000"
    echo ""
    echo "  # With service detection"
    echo "  ./r3cond0g -target-host 192.168.1.1 -service-detect -vuln-mapping"
    echo ""
    echo "Configuration files:"
    echo "  - config_default.json"
    echo "  - config_stealth.json"
    echo "  - config_aggressive.json"
    echo "  - config_discovery.json"
    echo ""
    echo "For more options: python3 r3cond0g_controller.py --help"
}

# Main installation flow
main() {
    case "$1" in
        --user)
            echo "üè† User-only installation mode"
            setup_python_env
            build_core
            setup_config
            run_tests
            show_usage
            ;;
        --full)
            echo "üöÄ Full installation mode"
            install_system_deps
            setup_python_env
            build_core
            setup_config
            setup_capabilities
            create_desktop_entry
            run_tests
            show_usage
            ;;
        --build-only)
            echo "üî® Build-only mode"
            build_core
            ;;
        --test)
            echo "üß™ Test mode"
            run_tests
            ;;
        *)
            echo "Usage: $0 [--user|--full|--build-only|--test]"
            echo ""
            echo "  --user       User-only installation (no sudo required)"
            echo "  --full       Full installation with system dependencies"
            echo "  --build-only Only build the Go core"
            echo "  --test       Run tests only"
            echo ""
            echo "Default: --user mode"
            echo ""
            main --user
            ;;
    esac
}

# Run main function
main "$@"
